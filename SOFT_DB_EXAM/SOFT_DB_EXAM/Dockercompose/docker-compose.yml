version: '3.9'

services:
  ###############################
  # 1) Config Server ReplicaSet #
  ###############################
  configsvr1:
    image: mongo:6.0
    container_name: configsvr1
    command:
      - mongod
      - --configsvr
      - --replSet=configReplSet
      - --port=27019
      - --bind_ip_all
    volumes:
      - configsvr1-data:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--quiet", "--host", "localhost", "--port", "27019", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      timeout: 3s
      retries: 5

  configsvr2:
    image: mongo:6.0
    container_name: configsvr2
    command:
      - mongod
      - --configsvr
      - --replSet=configReplSet
      - --port=27019
      - --bind_ip_all
    volumes:
      - configsvr2-data:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--quiet", "--host", "localhost", "--port", "27019", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      timeout: 3s
      retries: 5

  configsvr3:
    image: mongo:6.0
    container_name: configsvr3
    command:
      - mongod
      - --configsvr
      - --replSet=configReplSet
      - --port=27019
      - --bind_ip_all
    volumes:
      - configsvr3-data:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--quiet", "--host", "localhost", "--port", "27019", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      timeout: 3s
      retries: 5

  #########################
  # 2) Two Shard ReplicaSets #
  #########################
  shard1:
    image: mongo:6.0
    container_name: shard1
    command:
      - mongod
      - --shardsvr
      - --replSet=shard1ReplSet
      - --port=27018
      - --bind_ip_all
    volumes:
      - shard1-data:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--quiet", "--host", "localhost", "--port", "27018", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      timeout: 3s
      retries: 5

  shard2:
    image: mongo:6.0
    container_name: shard2
    command:
      - mongod
      - --shardsvr
      - --replSet=shard2ReplSet
      - --port=27018
      - --bind_ip_all
    volumes:
      - shard2-data:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--quiet", "--host", "localhost", "--port", "27018", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      timeout: 3s
      retries: 5

  ##################
  # 3) Mongos Router #
  ##################
  mongos:
    image: mongo:6.0
    container_name: mongos
    depends_on:
      configsvr1:
        condition: service_healthy
      configsvr2:
        condition: service_healthy
      configsvr3:
        condition: service_healthy
      shard1:
        condition: service_healthy
      shard2:
        condition: service_healthy
    entrypoint:
      - bash
      - -c
      - |
        echo "Waiting for config servers and shards..."
        until mongosh --quiet --host configsvr1:27019 --eval "db.adminCommand('ping')"; do sleep 2; done
        until mongosh --quiet --host configsvr2:27019 --eval "db.adminCommand('ping')"; do sleep 2; done
        until mongosh --quiet --host configsvr3:27019 --eval "db.adminCommand('ping')"; do sleep 2; done
        until mongosh --quiet --host shard1:27018 --eval "db.adminCommand('ping')"; do sleep 2; done
        until mongosh --quiet --host shard2:27018 --eval "db.adminCommand('ping')"; do sleep 2; done

        # Initiate configReplSet if needed
        if ! mongosh --quiet --host configsvr1:27019 --eval "rs.status().ok" >/dev/null; then
          echo "Initiating configReplSet..."
          mongosh --quiet --host configsvr1:27019 \
            --eval "rs.initiate({_id:'configReplSet',configsvr:true,members:[
              {_id:0,host:'configsvr1:27019'},
              {_id:1,host:'configsvr2:27019'},
              {_id:2,host:'configsvr3:27019'}
            ]});"
        fi

        # Initiate shard1ReplSet if needed
        if ! mongosh --quiet --host shard1:27018 --eval "rs.status().ok" >/dev/null; then
          echo "Initiating shard1ReplSet..."
          mongosh --quiet --host shard1:27018 \
            --eval "rs.initiate({_id:'shard1ReplSet',members:[{_id:0,host:'shard1:27018'}]});"
        fi

        # Initiate shard2ReplSet if needed
        if ! mongosh --quiet --host shard2:27018 --eval "rs.status().ok" >/dev/null; then
          echo "Initiating shard2ReplSet..."
          mongosh --quiet --host shard2:27018 \
            --eval "rs.initiate({_id:'shard2ReplSet',members:[{_id:0,host:'shard2:27018'}]});"
        fi

        # Add shards to the cluster (only once)
        mongosh --quiet --host configsvr1:27019 \
          --eval "if (sh.status().shards.length === 0) {
            sh.addShard('shard1ReplSet/shard1:27018');
            sh.addShard('shard2ReplSet/shard2:27018');
          }"

        echo "Launching mongos router..."
        exec mongos \
          --configdb configReplSet/configsvr1:27019,configsvr2:27019,configsvr3:27019 \
          --bind_ip_all

    ports:
      - "27018:27017"
    healthcheck:
      test: [ "CMD", "mongosh", "--quiet", "--host", "localhost", "--port", "27017", "--eval", "db.adminCommand('ping')" ]
      start_period: 30s
      interval: 10s
      timeout: 5s
      retries: 5
  
  
  #########################
  # 4) Data Seeding (once)#
  #########################
  mongo-seed:
    image: mongo:6.0
    container_name: mongo-seed
    depends_on:
      mongos:
        condition: service_healthy
    entrypoint:
      - bash
      - -c
      - |
        echo "⏳ Waiting for mongos to be ready…"
        until mongosh --quiet --host mongos:27017 --eval "db.adminCommand('ping')" >/dev/null 2>&1; do
          sleep 2
        done

        echo "🔗 Checking registered shards…"
        # Query the router for how many shards it knows about
        LEN=$$(mongosh --quiet --host mongos:27017 \
          --eval "db.adminCommand({listShards:1}).shards.length")
        # Strip non-digits and default empty → 0
        LEN=$${LEN//[^0-9]/}
        LEN=$${LEN:-0}

        if [ "$$LEN" -lt 2 ]; then
          echo "➕ Adding shard1 and shard2 to the cluster…"
          mongosh --quiet --host mongos:27017 \
            --eval "sh.addShard('shard1ReplSet/shard1:27018')"
          mongosh --quiet --host mongos:27017 \
            --eval "sh.addShard('shard2ReplSet/shard2:27018')"
        else
          echo "✅ Already have $$LEN shards registered."
        fi

        echo "📦 Seeding Movies collection…"
        COUNT=$$(mongosh --quiet --host mongos:27017 \
          --eval "db.getSiblingDB('MoviesDatabase').Movies.countDocuments()")
        COUNT=$${COUNT:-0}
        if [ "$$COUNT" -eq 0 ]; then
          mongoimport \
            --host mongos:27017 \
            --db MoviesDatabase \
            --collection Movies \
            --type json \
            --jsonArray \
            --file /docker-entrypoint-initdb.d/movies.json
        else
          echo "Skipping seed, found $$COUNT docs."
        fi

    volumes:
      - ./movies.json:/docker-entrypoint-initdb.d/movies.json:ro
    restart: "no"
    
    
    
    
    #########################
  # 5) Redis & SQL Server #
  #########################
  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6380:6379"
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  sqlserver:
    image: mcr.microsoft.com/mssql/server:2019-latest
    container_name: sqlserver
    environment:
      SA_PASSWORD: "yourStrong(!)Password"
      ACCEPT_EULA: "Y"
    ports:
      - "1434:1433"
    volumes:
      - sqlserver-data:/var/opt/mssql
    healthcheck:
      test: ["CMD-SHELL", "grep 'SQL Server is now ready for client connections' /var/opt/mssql/log/errorlog || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10

  #########################
  # 6) Your Movie API     #
  #########################
  app:
    image: soft_db_exam
    container_name: movie-api
    depends_on:
      mongo-seed:
        condition: service_completed_successfully
      mongos:
        condition: service_healthy
      redis:
        condition: service_healthy
      sqlserver:
        condition: service_healthy
    environment:
      ASPNETCORE_ENVIRONMENT: "Development"
      ConnectionStrings__DefaultConnection: "Server=sqlserver,1433;Database=movieDB;User Id=sa;Password=yourStrong(!)Password;TrustServerCertificate=True;"
      Redis__ConnectionString: "redis:6379"
      MongoDbSettings__ConnectionString: "mongodb://mongos:27017"
      MongoDbSettings__DatabaseName: "MoviesDatabase"
      MongoDbSettings__CollectionName: "Movies"
      Jwt__Key: "a-very-long-secret-key-you-should-store-safely"
      Jwt__Issuer: "YourApiName"
      Jwt__Audience: "YourApiClients"
      Jwt__ExpireMinutes: "60"
      ASPNETCORE_URLS: "http://+:80"
    ports:
      - "5001:80"

volumes:
  configsvr1-data:
  configsvr2-data:
  configsvr3-data:
  shard1-data:
  shard2-data:
  redis-data:
  sqlserver-data:
